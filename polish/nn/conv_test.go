package nn

import (
	"math"
	"testing"
)

func TestPatches(t *testing.T) {
	input := NewTensor(4, 3, 2)
	input.Data = []float32{
		1, 2, 3, 4, 5, 6,
		7, 8, 9, 10, 11, 12,
		13, 14, 15, 16, 17, 18,
		19, 20, 21, 22, 23, 24,
	}

	inputs := [][2]int{
		{2, 1},
		{2, 2},
		{3, 1},
		{3, 2},
	}
	sums := [][]float32{
		{
			44, 60,
			92, 108,
			140, 156,
		},
		{
			44,
			140,
		},
		{
			171,
			279,
		},
		{
			171,
		},
	}

	for i, inputArgs := range inputs {
		expected := sums[i]
		var actual []float32
		Patches(input, inputArgs[0], inputArgs[1], func(t *Tensor) {
			var sum float32
			for _, c := range t.Data {
				sum += c
			}
			actual = append(actual, sum)
		})
		if len(actual) != len(expected) {
			t.Errorf("case %d: unexpected length (got %d expected %d)", i,
				len(actual), len(expected))
			continue
		}
		for j, x := range expected {
			a := actual[j]
			if math.Abs(float64(x-a)) > 1e-3 {
				t.Errorf("case %d: element %d: expected %f but got %f", i, j, x, a)
				break
			}
		}
	}
}

func TestConvSmall(t *testing.T) {
	c := &Conv{
		OutDepth:   1,
		InDepth:    1,
		KernelSize: 3,
		Stride:     1,
		Weights: []float32{
			-0.0139077, 0.2473437, 0.1155401, -0.0495334, -0.0390755, 0.3136772, -0.2264613, -0.2643562, 0.2818739,
		},
	}
	in := NewTensor(4, 4, 1)
	copy(in.Data, []float32{
		0.6017266, -2.0017490, 0.2513519, 0.5615258, 0.1457711, 0.8694047, 0.3224155, 0.6138996, -0.2135582, 0.8488631, 0.8838763, 0.8060158, 0.7435452, 0.0199154, 1.2212700, -0.4557744,
	})

	expected := NewTensor(2, 2, 1)
	copy(expected.Data, []float32{
		-0.3414040, 0.0930938, 0.6755218, -0.1410014,
	})
	actual := c.Apply(in)
	if expected.Height != actual.Height || expected.Width != actual.Width ||
		expected.Depth != actual.Depth {
		t.Fatal("incorrect output shape")
	}
	for i, x := range expected.Data {
		a := actual.Data[i]
		if math.Abs(float64(x-a)) > 1e-4 {
			t.Errorf("bad value at %d: expected %f but got %f", i, x, a)
		}
	}
}

func TestConvLarge(t *testing.T) {
	c := &Conv{
		OutDepth:   4,
		InDepth:    5,
		KernelSize: 3,
		Stride:     2,
		Weights: []float32{
			0.0048753, 0.1400915, 0.0073967, -0.1249796, 0.0990686, 0.0990699, -0.1468822, 0.0789842, 0.1155828, 0.1138192, 0.1149694, 0.0828862, 0.0791527, -0.0879772, 0.0949459, 0.0085811, -0.0385565, 0.0788283, -0.0003407, -0.1072131, -0.1233412, 0.0257104, -0.1403926, -0.1191188, -0.0455806, 0.0049993, 0.1048242, 0.1100614, 0.1131917, -0.0771568, -0.0771224, -0.0381215, 0.0982061, -0.0779766, 0.0589884, 0.1120752, -0.0661897, -0.1146785, 0.0792114, 0.0506790, -0.0886449, 0.1148331, -0.1356669, 0.1354263, 0.0253897, -0.0787591, -0.0843297, -0.1268204, 0.0234138, 0.0515354, 0.0450980, -0.0963772, -0.0022710, 0.1145745, -0.0908253, 0.0116528, -0.0321431, -0.0787754, 0.0449269, -0.0024932, -0.0477832, 0.1000197, -0.0555633, -0.0737215, 0.1214098, 0.0158767, -0.0083296, -0.0655478, -0.1114864, 0.0336006, -0.0806804, -0.1058603, 0.0962375, -0.1000008, 0.0794527, 0.1352933, -0.0220469, 0.0106698, 0.0303797, 0.1366412, 0.1070330, 0.0979977, -0.1086167, 0.0448620, 0.1062138, -0.1036574, -0.1454835, -0.0667073, -0.1310376, 0.1209997, 0.0158482, -0.0984464, -0.1211329, -0.1013677, 0.0562877, 0.0543369, -0.0502296, -0.1218463, -0.0558607, -0.0743429, 0.0363706, -0.1145388, 0.1290013, -0.1090252, -0.1209797, 0.0011886, 0.0885055, -0.0460116, 0.0160562, -0.1270224, -0.0416963, -0.1314727, -0.0775326, 0.0971618, 0.0775764, -0.1064220, -0.0264593, -0.0582033, -0.0048981, -0.0312180, -0.0059659, 0.1070529, 0.0789812, -0.0520511, -0.1221963, 0.1213690, 0.1360595, 0.1326346, -0.0381068, 0.0179752, 0.0817789, -0.1232072, -0.0619079, -0.0240207, -0.0806419, 0.0344195, -0.1122220, 0.0418564, 0.0423259, -0.0128046, 0.0986949, 0.1288407, 0.0492961, -0.0569584, 0.0703266, 0.1369467, 0.0336334, 0.0923058, -0.0318223, 0.0872521, 0.1001197, 0.0224605, -0.0315309, -0.0356362, -0.1288342, -0.0696220, 0.0201382, -0.0332683, -0.0427386, 0.0922373, -0.1347726, 0.0486960, 0.0391940, -0.0881831, -0.0382566, 0.0862630, 0.0826437, 0.0556344, -0.0267371, -0.0464863, -0.0745129, 0.1025151, 0.0037476, -0.0211752, -0.0202064, -0.0645246, 0.1358609, 0.0056850, -0.1205265, 0.0110337,
		},
	}
	in := NewTensor(6, 7, 5)
	copy(in.Data, []float32{
		1.4725239, -0.0588857, -1.0511501, -0.8535296, -0.1226160, -2.0331368, 0.2033319, 0.1808803, 0.7840600, -0.7841823, -0.8234431, 0.2406522, 1.0564671, -0.1470382, 0.0237237, 1.3913455, -0.1125739, 0.0310295, -0.5059676, 0.6760480, -0.1207311, -2.0347879, 3.4141071, -0.8715456, -1.0442810, 1.0539747, 1.0902373, 1.0664262, 0.9359902, -1.5147089, 0.3542635, 0.6339781, -0.7948303, 1.0690100, -0.6837966, -0.9467762, -1.4691463, 0.0043499, 0.8494170, -0.4182343, -0.4738699, -1.9620832, 0.4696709, -1.2688903, -1.9464079, 0.6544799, 0.0915866, 0.3698487, -0.8195642, 0.7171361, -0.0951290, 0.9562339, -0.7151088, 0.4587850, 0.4896681, -1.2527742, -0.9197360, 0.1529317, 2.2528563, -0.7698087, 1.1912090, 0.0766383, -0.7134541, -1.5935307, 0.4763172, -0.1287121, -1.3450482, -0.7140349, -0.4916139, -0.3380890, 1.7034016, 0.5017734, 0.1614027, 1.0646375, 0.0937267, 1.3851739, -1.3037589, -2.0523577, -1.2393095, 0.2878762, -1.5465885, -0.1017815, 0.3366855, -1.0065933, -0.7175980, 1.2542903, -1.6045935, -0.0836585, 1.0936671, 0.8313980, -0.0118547, 0.0760615, 0.1303777, -0.0700363, 1.1094716, 0.5530361, 1.0745329, 0.2073360, -1.0503830, -0.6106652, 0.4007267, -1.6435132, 2.0033343, -0.3548864, 1.4754119, 0.0968325, 0.5541025, 1.5374726, -0.4410564, 1.1347706, -0.5501668, -1.5077022, 0.2906386, 0.6215913, 0.7636902, -0.4066638, 1.3752940, 1.0289661, -1.0468789, -0.6141735, 1.4556367, 1.7281872, -0.2950397, 0.5613296, -0.3341977, -0.0380274, 1.0071597, -0.0684543, 0.5041260, 1.5872769, -1.7071162, -0.6374162, 0.0035660, -0.6789651, 0.4903325, -1.6518031, -1.2705370, -0.4742535, -1.0952357, -0.2847594, -0.2438605, 1.6654413, 0.7398302, 0.8784127, -0.3128213, -1.1850022, 1.1968794, -0.2819678, -2.2011805, -1.5756040, 0.4870483, 0.9218722, 0.7067528, -0.8398420, -0.7508997, 0.6922061, 0.6504284, 1.3526452, -2.1302404, 0.3583336, -0.5170502, 1.2601988, -0.5421015, -0.1550326, 0.5573612, 1.2214118, 1.3208184, -0.2973142, -0.9441420, -0.5450425, -0.4168938, 1.7370363, -0.5848581, -1.8912510, -1.0972722, -0.7830400, -0.0830904, -1.9210624, 0.1816452, -2.3774185, 0.0361986, 0.4834803, 0.7642338, -0.5535203, -0.2283998, 0.3258312, -0.3148893, -0.9916397, -0.5933701, -0.9147130, 1.3224818, 0.6048592, -1.7784269, 1.8416162, -0.2276750, 0.9857835, 0.8796785, 0.0706747, -1.5941858, -0.1933369, -1.6960143, 0.8870867, -0.7864155, -1.5835406, 1.4838743, -1.7379398, -1.5213418, 0.6810994, 0.1092481, -0.5279986,
	})

	expected := NewTensor(2, 3, 4)
	copy(expected.Data, []float32{
		-0.5791513, -0.4299181, -0.2282083, 0.9621052, 0.0896676, 0.0673461, 0.0544239, -0.9143549, -0.0084198, 0.3577323, -0.4168170, -0.4523573, -0.2743906, -0.7193667, 0.8375948, 0.6181691, 0.6491780, -1.1584780, -0.3041711, -0.1271321, -0.8035574, -0.0559687, 0.0250076, 0.0924966,
	})
	actual := c.Apply(in)
	if expected.Height != actual.Height || expected.Width != actual.Width ||
		expected.Depth != actual.Depth {
		t.Fatal("incorrect output shape")
	}
	for i, x := range expected.Data {
		a := actual.Data[i]
		if math.Abs(float64(x-a)) > 1e-4 {
			t.Errorf("bad value at %d: expected %f but got %f", i, x, a)
		}
	}
}

func TestSpatialConvLarge(t *testing.T) {
	c := &SpatialConv{
		Depth:      5,
		KernelSize: 3,
		Stride:     2,
		Weights: []float32{
			-0.1911255, 0.0742732, 0.3244561, 0.2112495, -0.0780912, 0.2744516, 0.1766910, -0.3102708, -0.0744405, 0.2958856, 0.2830285, -0.1699406, -0.0270629, -0.0285498, -0.0274338, 0.0813831, 0.2177308, -0.1350431, 0.2850550, -0.2722039, -0.3297556, -0.1751623, 0.1043071, 0.0395478, 0.0902030, -0.1793895, 0.0326312, 0.2715265, 0.0960180, 0.2904015, -0.0761158, -0.0874449, -0.3238208, 0.2678641, 0.1489393, -0.2541793, -0.0893213, 0.0757578, -0.0567662, 0.1434719, 0.2722551, -0.0703747, 0.0763021, -0.0925830, -0.0667646,
		},
	}
	in := NewTensor(6, 7, 5)
	copy(in.Data, []float32{
		1.1409054, 1.5649923, -0.1948104, 1.3556889, 0.6847361, 0.6819699, 0.9286522, -0.3399995, -1.8085134, 1.3648162, -0.9051613, 1.0117084, -0.0365825, -0.9432146, 1.2921587, 0.4738652, -1.0386302, 0.8244314, -1.4762123, -0.4245814, 0.3236750, 1.4356518, -0.9547286, -2.9507315, 0.7800845, -0.4020369, 0.3173794, 0.6547441, 1.6436012, -0.4779457, 0.3736600, 0.8305290, -0.1762423, 0.3623725, -1.8178300, -0.1546911, -1.0005274, -1.4735147, 0.3573847, 0.2560021, -0.3821970, -0.3495889, 0.1900006, -2.2389088, -0.9038950, -0.3378337, 0.7981479, 0.9964933, 0.4515326, 0.0229507, -1.6533415, 1.4932644, 1.0282696, -1.4741617, 0.6400365, 0.4244200, 1.4641294, 0.5905561, 0.8236988, -0.6341587, -0.0929454, -1.0886556, 0.2774341, 0.7295105, 0.6951755, 0.1826468, -0.8445777, -0.4030475, -0.7516201, -0.0158012, 0.6809133, 0.9969447, 0.3797884, 1.6414919, 1.8294731, -1.2760342, 1.0722744, -0.2493834, -0.7005353, -1.2985059, 0.2131938, 0.0640154, 0.1608759, 0.3719594, 0.0770728, -0.3376203, -1.2530504, 1.2432044, 0.1290189, -1.1323935, 1.6972812, -1.4169976, 0.6200145, 0.4643981, 0.0858503, -0.3666513, 0.0400702, 1.2037058, 1.3236476, 0.7106019, -0.7832468, 0.4510391, -0.5057965, -0.6557346, -0.3792492, 0.5938662, -0.4725557, -0.0708619, -0.8851832, 1.6350344, 0.9954666, 0.8817711, 0.6591703, 0.1176392, -1.8714072, 1.8101006, -0.7794924, -0.3896322, -1.9108096, -1.0304877, -0.7368749, -0.1825271, -0.4482952, 0.8978229, 0.7722555, 1.8434216, 2.1341970, -0.1730643, -0.8144822, 0.0329581, 0.0599070, -1.4132864, 0.1444537, 2.6583509, 0.2056222, -0.9210598, -1.1162794, -0.6732786, 1.8129425, -1.8235412, -0.8088601, 0.2537483, -1.4412017, 0.8429257, -3.2031205, 0.1626158, 0.4738091, 2.5309155, -1.6109036, 1.0201719, 1.2063761, 0.3259659, 0.4106356, -1.7807648, 0.8569935, -0.9382124, 0.0530952, -1.4398686, -0.4192069, -0.2597384, 0.1468918, 0.7345250, -0.4082018, 0.2757454, 0.4615452, -1.1347867, 1.6473992, -1.5824908, 1.7915055, 0.8639272, -0.1940993, 0.2653693, 0.6212785, 0.1528680, -0.2220691, 1.2923363, 0.3638144, -2.5262332, -0.4221732, -0.1805679, 1.2553589, -1.0108938, 1.2761886, -1.5684910, 0.0717819, -1.6453557, 0.8571983, 0.1580963, 0.1615494, -1.2693247, 0.8411252, -0.3765129, -1.0511090, 1.0487553, -0.2171007, 0.7409956, -1.2929105, 0.1197028, 0.5129985, 0.2798404, 0.8487886, 1.0983537, -1.5116918, 0.0438500, 0.0298962, 0.4987317, 0.1934926, 1.5776329, -1.1949311, -0.3078639,
	})

	expected := NewTensor(2, 3, 5)
	copy(expected.Data, []float32{
		-0.0562831, 0.8750818, 0.4506569, 0.1837227, 0.0125734, 0.5035170, -0.4192492, -0.1522258, -1.4261292, 0.1352992, 0.6485183, 0.2205980, -0.6592113, 0.0669617, 0.0627794, 0.1055823, 0.6763800, -0.3817674, 1.6008079, -0.8646283, 1.9240477, -0.1882490, -0.2003380, -0.0306023, 0.0211626, -0.0813035, -0.0887315, 0.3019635, -0.3929369, 0.2267936,
	})
	actual := c.Apply(in)
	if expected.Height != actual.Height || expected.Width != actual.Width ||
		expected.Depth != actual.Depth {
		t.Fatal("incorrect output shape")
	}
	for i, x := range expected.Data {
		a := actual.Data[i]
		if math.Abs(float64(x-a)) > 1e-4 {
			t.Errorf("bad value at %d: expected %f but got %f", i, x, a)
		}
	}
}
